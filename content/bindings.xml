<?xml version="1.0"?>
<!-- 
/*
 ***** BEGIN LICENSE BLOCK *****
 * This file is part of ToneQuilla, Play sound in a filter, by Mesquilla.
 *
 * ToneQuilla is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * You should have received a copy of the GNU General Public License
 * along with ToneQuilla.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is ToneQuilla code.
 *
 * The Initial Developer of the Original Code is
 * Kent James <rkent@mesquilla.com>
 * Portions created by the Initial Developer are Copyright (C) 2008
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * ***** END LICENSE BLOCK *****
 */
-->
<!DOCTYPE bindings SYSTEM "chrome://tonequilla/locale/bindings.dtd">
<bindings   id="tonequillaBindings"
            xmlns="http://www.mozilla.org/xbl"
            xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
            xmlns:xbl="http://www.mozilla.org/xbl">
  <binding id="soundPicker" extends="chrome://messenger/content/searchWidgets.xml#ruleactiontarget-base">
    <content>
      <xul:hbox class="ruleactionitem">
        <xul:textbox readonly="true" flex="1"/>
        <xul:toolbarbutton image="chrome://tonequilla/skin/folder.png"
                    class="focusbutton" tooltiptext="&filebutton;"
                    oncommand="this.parentNode.parentNode.getURL()"/>
        <xul:toolbarbutton image="chrome://tonequilla/skin/player_play.png"
                    class="focusbutton" tooltiptext="&playbutton;"
                    oncommand="this.parentNode.parentNode.play()"/>
      </xul:hbox>
    </content>
    <implementation>
      <constructor>
        <![CDATA[
          if (this.hbox.value && this.hbox.value.length)
          {
            let nsIFileURL = Components.classes["@mozilla.org/network/io-service;1"]
                                   .getService(Components.interfaces.nsIIOService)
                                   .newURI(this.hbox.value, null, null)
                                   .QueryInterface(Components.interfaces.nsIFileURL);
            this.textbox.setAttribute('value', nsIFileURL.file.leafName);
          }
        ]]>
      </constructor>
      <field name="hbox">document.getAnonymousNodes(this)[0]</field>
      <field name="textbox">document.getAnonymousNodes(this)[0].firstChild</field>
      <method name="getURL">
        <body>
          <![CDATA[
            const Ci = Components.interfaces,
                  Cc = Components.classes,
                  nsIFilePicker = Ci.nsIFilePicker,
                  wildmat = "*.wav; *.ogg; *.mp3; *.aiff",
                  label = ".wav, .ogg, .mp3; .aiff";
            let fp = Cc["@mozilla.org/filepicker;1"].createInstance(nsIFilePicker),
                thisHbox = this.hbox,
                thisTextbox = this.textbox;


            fp.init(window, "", nsIFilePicker.modeOpen);
            fp.appendFilter(label, wildmat);
            fp.appendFilters(nsIFilePicker.filterAll);
            if (thisHbox.value && thisHbox.value.length)
            {
              let nsIURL = Cc["@mozilla.org/network/io-service;1"]
                            .getService(Ci.nsIIOService)
                            .newURI(thisHbox.value, null, null)
                            .QueryInterface(Ci.nsIURL);
              fp.defaultString = nsIURL.fileName;
              fp.displayDirectory = nsIURL.QueryInterface(Ci.nsIFileURL)
                                          .file
                                          .parent;
            }
            else
            {            
              Components.utils.import("resource://tonequilla/ToneQuillaPlay.jsm");
              if (!ToneQuillaPlay.window || !ToneQuillaPlay.soundsDirectory) {
                debugger;
                ToneQuillaPlay.init();
              }
              if (ToneQuillaPlay.soundsDirectory)
                fp.displayDirectory =
                  ToneQuillaPlay.soundsDirectory.QueryInterface(Ci.nsIFile);
            }
            
            let fpCallback = function fpCallback_FilePicker(aResult) {
              if (aResult == Ci.nsIFilePicker.returnOK) {
                if (fp.file) {
                  let url = fp.fileURL;
                  thisHbox.value = url.spec;
                  thisTextbox.value = fp.file.leafName;
                }
              }
            }

            fp.open(fpCallback);		    
          ]]>
        </body>
      </method>
      <method name="play">
        <body>
          <![CDATA[
          Components.utils.import("resource://tonequilla/ToneQuillaPlay.jsm");
          ToneQuillaPlay.play(this.hbox.value);
          ]]>
        </body>
      </method>
    </implementation>
  </binding>
</bindings>
